name: "Update Ruby"
description: "Updates Ruby version"

runs:
  using: composite
  steps:
  # Pull update from git, switch to branch
  - name: checkout update branch
    shell: bash
    run: git fetch && git switch ${{ env.COMMIT_BRANCH }}

  - name: Set up Ruby
    uses: ruby/setup-ruby@v1
    with:
      ruby-version: ${{ env.TARGET_RUBY_VERSION }}

  # run the text replacements on the .ruby version and docker file.
  - name: Update Ruby versions
    shell: bash
    run: |
      ## convert path variable into array
      paths_array=(${${{ env.RUBY_PATHS}}})
      ## Check if any paths were found
      if [ ${#paths_array=[@]} -eq 0 ]; then
        echo "No 'ruby-version' files found. Exiting."
        exit 0
      fi
      ## Loop paths
      for path in "${paths_array=[@]}"; do
        ## pushd automatically manages a directory stack.
        if ! pushd "$path" > /dev/null; then
          echo "!!! ERROR: Could not change directory to $project_path. Skipping."
          exit 1;
        fi

        ## update .ruby file
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ .ruby-version
        ## update docker file
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ Dockerfile
        ## attempt to run bundle install
        if ! bundle update --ruby; then
          echo "!!! ERROR: 'bundle update' FAILED in $path !!!"
          echo "So have to brute force it"
          echo "Remove and rebuild Gem lock file."
          rm Gemfile.lock
          echo "Gemfile.lock removed"
          bundle install
          echo "Reinstalled Gems and dependencies"
        else
          echo "Bundle update Successful!"
        fi
        # Pop back to the original directory
        popd > /dev/null
      done
