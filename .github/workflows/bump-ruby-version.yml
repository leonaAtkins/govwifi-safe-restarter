name: Upgrade Ruby

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 1 * 0" # Runs Monthly

permissions:
  contents: write
  pull-requests: write

jobs:
  upgrade-ruby:
    runs-on: ubuntu-latest
    steps:
    # - name: Setup User Env
    #   run: |
    #       git config user.name "${{ github.actor }}"
    #       git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

    - name: Check out code
      uses: actions/checkout@v4

    - name: Determine target Ruby version
      id: get-ruby-version
      shell: bash
      run: |
          LATEST_RUBY=$(curl -s https://api.github.com/repos/ruby/ruby/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/' | tr '_' '.')
          echo "TARGET_RUBY_VERSION=$LATEST_RUBY" >> "$GITHUB_OUTPUT"

    - name: Check if Ruby is updated
      shell: bash
      run: |
        if grep -q "${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}" ".ruby-version" ; then
          echo "Ruby Version Match, nothing to do, exit with success."
          exit 1
        else
          echo "Current version of Ruby: $(cat .ruby-version) is different from latest: ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }} continue to update."
        fi

    - name: set branch name
      id: set-branch-name
      shell: bash
      run: echo "BRANCH_NAME=update-to-ruby-${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}" >> "$GITHUB_OUTPUT"

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}

    - name: Create upgrade branch
      shell: bash
      run: |
        git checkout -b ${{ steps.set-branch-name.outputs.BRANCH_NAME }}

    - name: Update Ruby versions
      shell: bash
      run: |
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}'/ .ruby-version
        cat .ruby-version
        echo "Updated .ruby-version file"
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}'/ Dockerfile
        cat Dockerfile
        echo "Updated DockerFile"

    - name: Attempt to run bundle update
      id: bundle-update
      shell: bash
      run: |
        bundle update --ruby
        echo "Updated Gemfile and dependencies"
      continue-on-error: true

    - name: Check on update failure
      if: steps.bundle-update.outputs.status == 'failure'
      run: |
        echo "Bundle Update didn't work, so have to brute force it"
        echo "Remove and rebuild lock file."
        rm Gemfile.lock
        echo "Gemfile.lock removed"
        bundle install
        echo "Reinstalled Gems and dependencies"

    - name: Check for changes
      shell: bash
      id: check_changes
      run: |
        if [[ -n "$(git status --porcelain)" ]]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit changes
      if: steps.check_changes.outputs.has_changes == 'true'
      shell: bash
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        if git ls-remote --exit-code --heads origin " ${{ steps.set-branch-name.outputs.BRANCH_NAME }}"; then
          git push origin --delete "${{ steps.set-branch-name.outputs.BRANCH_NAME }}"
        fi
        git add .
        git commit -m "Update Ruby to version ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}"
        git push origin ${{ steps.set-branch-name.outputs.BRANCH_NAME }}

    - name: Create Pull Request
      if: steps.check_changes.outputs.has_changes == 'true'
      shell: bash
      run: |
        PR_BODY="This PR updates the Ruby version to ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}.

        Changes made:
        - Updated .ruby-version file
        - Updated Gemfile ruby version
        - Updated Dockerfile ruby version
        - Rebuilt Gemfile.lock dependencies

        Please review and test before merging.

        Powered by [Ruby Upgrade Action](https://github.com/andrew/ruby-upgrade-action/)"

        gh pr create \
          --title "Update Ruby to version ${{ steps.get-ruby-version.outputs.TARGET_RUBY_VERSION }}" \
          --body "$PR_BODY" \
          --base master \
          --head ${{ steps.set-branch-name.outputs.BRANCH_NAME }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    steps:
#      - uses: actions/checkout@v4
#      - uses: andrew/ruby-upgrade-action@main
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}