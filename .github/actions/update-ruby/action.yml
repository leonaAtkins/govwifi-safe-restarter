name: "Update Ruby"
description: "Updates Ruby version"

inputs:
  ruby-path:
    description: 'The path/directory where the ruby version config files are located, default root'
    required: false
    default: '.'

runs:
  using: composite
  steps:
  - name: checkout update branch
    shell: bash
    run: git checkout ${{ env.COMMIT_BRANCH }}

  - name: move to ruby path/directory
    shell: bash
    run: cd ${{inputs.ruby-path}}/

  - name: Update Ruby versions
    shell: bash
    run: |
      sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ .ruby-version
      cat .ruby-version
      echo "Updated .ruby-version file"
      sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ Dockerfile
      cat Dockerfile
      echo "Updated DockerFile"

  - name: Set up Ruby
    uses: ruby/setup-ruby@v1
    with:
      ruby-version: ${{ env.TARGET_RUBY_VERSION }}

  - name: Attempt to run bundle update
    id: bundle-update
    shell: bash
    run: |
      bundle update --ruby
      echo "Updated Gemfile and dependencies"
    continue-on-error: true

  - name: Check on update failure
    shell: bash
    if: steps.bundle-update.outcome != 'success'
    run: |
      echo "Bundle Update didn't work, so have to brute force it"
      echo "Remove and rebuild lock file."
      rm Gemfile.lock
      echo "Gemfile.lock removed"
      bundle install
      echo "Reinstalled Gems and dependencies"

  - name: Check for changes
    shell: bash
    id: check_changes
    run: |
      if [[ -n "$(git status --porcelain)" ]]; then
        echo "has_changes=true" >> $GITHUB_OUTPUT
      else
        echo "has_changes=false" >> $GITHUB_OUTPUT
      fi

  - name: Commit changes
    if: steps.check_changes.outputs.has_changes == 'true'
    shell: bash
    run: |
      git config --local user.email "github-actions[bot]@users.noreply.github.com"
      git config --local user.name "github-actions[bot]"
      if git ls-remote --exit-code --heads origin " ${{ env.COMMIT_BRANCH }}"; then
        git push origin --delete "${{ env.COMMIT_BRANCH}}"
      fi

      git add .
      git commit -m "Update Ruby to version ${{ env.TARGET_RUBY_VERSION }}"
      git push origin ${{ env.COMMIT_BRANCH}}
