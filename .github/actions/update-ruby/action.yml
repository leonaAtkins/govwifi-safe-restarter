name: "Update Ruby"
description: "Updates Ruby version"

inputs:
  ruby-paths:
    description: 'The paths/directories where the ruby version config files are located, default root'
    required: false
    default: '.'

runs:
  using: composite
  steps:
  # Pull update from git, switch to branch
  - name: checkout update branch
    shell: bash
    run: git fetch && git switch ${{ env.COMMIT_BRANCH }}

  - name: Set up Ruby
    uses: ruby/setup-ruby@v1
    with:
      ruby-version: ${{ env.TARGET_RUBY_VERSION }}

  # run the text replacements on the .ruby version and docker file.
  - name: Update Ruby versions
    shell: bash
    run: |
      ##
      # Check if any paths were found
      if [ ${#inputs.ruby-paths[@]} -eq 0 ]; then
        echo "No 'ruby-version' files found. Exiting."
        exit 0
      fi
      for path in "${inputs.ruby-paths[@]}"; do
        # pushd automatically manages a directory stack.
        if ! pushd "$path" > /dev/null; then
          echo "!!! ERROR: Could not change directory to $project_path. Skipping."
          exit 1;
        fi

        ## update .ruby file
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ .ruby-version
        ## update docker file
        sed -i s/\[0-9\]\\.\[0-9\]\\.\[0-9\]/'${{ env.TARGET_RUBY_VERSION }}'/ Dockerfile
        ## attempt to run bundle install
        if ! bundle update --ruby; then
          echo "!!! ERROR: 'bundle updatel' FAILED in $path !!!"
          echo "So have to brute force it"
          echo "Remove and rebuild Gem lock file."
          rm Gemfile.lock
          echo "Gemfile.lock removed"
          bundle install
          echo "Reinstalled Gems and dependencies"
        else
          echo "Bundle update Successful!"
        fi
        # Pop back to the original directory
        popd > /dev/null
      done

  # Check git for changes.
  - name: Check for changes
    shell: bash
    id: check_changes
    run: |
      if [[ -n "$(git status --porcelain)" ]]; then
        echo "has_changes=true" >> $GITHUB_OUTPUT
      else
        echo "has_changes=false" >> $GITHUB_OUTPUT
      fi

  # commit and push the changes to the branch, again the PR can't access this workspace.
  - name: Commit changes
    if: steps.check_changes.outputs.has_changes == 'true'
    shell: bash
    run: |
      git config --local user.email "github-actions[bot]@users.noreply.github.com"
      git config --local user.name "github-actions[bot]"
      #if git ls-remote --exit-code --heads origin " ${{ env.COMMIT_BRANCH }}"; then
      #  git push origin --delete "${{ env.COMMIT_BRANCH}}"
      #fi
      git pull
      git add .
      git commit -m "Update Ruby to version ${{ env.TARGET_RUBY_VERSION }} for ${{inputs.ruby-path}}"
      git push origin ${{ env.COMMIT_BRANCH}}
